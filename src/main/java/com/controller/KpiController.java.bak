package com.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.kie.api.runtime.KieSession;
import org.kie.api.task.TaskService;
import org.kie.api.task.model.Status;
import org.kie.api.task.model.Task;
import org.kie.api.task.model.TaskSummary;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.entity.User;
import com.repository.UserRepository;

@RestController
@RequestMapping(value = "/kpi")
public class KpiController {

	@Autowired
	private KieSession kieSession;
	@Autowired
	private TaskService taskService;
	@Autowired
	private UserRepository userRepository;
	
	private static final String CODE_SUCCESS="SUCCESS";
	private static final String CODE_FAILED="FAILED";
	
	/*
	@RequestMapping(value="index")
	public String Index() {
		return "<h1 style='color:red'>Welcome, Pleas Login!</h1>";
	}
	@RequestMapping(value="error")
	public String error() {
		return "<h1 style='color:red'>User have no right to access!</h1>";
	}*/
	
	@PostMapping(value = "startProcess")
	public Long startProcess(String userId) {
		Map<String, Object> data = new HashMap<String, Object>(16);
		data.put("Manager", userId);
		
		return kieSession.startProcess("com.sample.bpmn.hello", data).getId();//KieServer-SpringBoot   SpringBoot
	}
	
	@PostMapping(value = "startProcessNew")
	public Object startProcessNew(String userId) {
		long processInstanceId = startProcess(userId) ;
		
		List<TaskSummary> list=taskService.getTasksByStatusByProcessInstanceId(processInstanceId, null,userId);
		
		System.out.println(list.size());
		
		
		
		Map<String,Object> map=new HashMap<String,Object>();
		
		map.put("processInstanceId", processInstanceId);
		map.put("taskList", list);
		/*
		TaskSummary ts=list.get(0);
		map.put("taskId", ts.getId());
		map.put("taskStatus", ts.getStatus());
		map.put("taskOwnerId", ts.getActualOwnerId());
		map.put("taskName", ts.getActualOwnerId());
		*/
		return map;//KieServer-SpringBoot   SpringBoot
	}
	
	
	@GetMapping(value="getMyAssignedTask")
	public List<TaskSummary> getMyAssignedTask() {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		
		System.out.println(auth.getName());
		
		return taskService.getTasksAssignedAsPotentialOwner(auth.getName(), "en_US");
	}
	
	@GetMapping(value="getProcessTaskList")
	public List<TaskSummary> getProcessTaskList(Long processInstanceId) {
		return taskService.getTasksByStatusByProcessInstanceId(processInstanceId, null, "en_US");
	}
	
	@GetMapping(value="getProcessTaskListByStatus")
	public List<TaskSummary> getProcessTaskListByStatus(Long processInstanceId,Status status) {
		List<Status> statusList=new ArrayList<Status>();
		statusList.add(status);
		return taskService.getTasksByStatusByProcessInstanceId(processInstanceId, statusList, "en_US");
	}
	
	@GetMapping(value="getTaskById")
	public Task getTaskById(Long taskId) {		
		return taskService.getTaskById(taskId);
	}
	
	@GetMapping(value="getMyOwnedTask")
	public List<TaskSummary> getMyOwnedTask() {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		
		System.out.println(auth.getName());		
	
		
		return taskService.getTasksOwned(auth.getName(), "en_US");
	}
	
	@GetMapping(value="getMyOwnedTaskByStatus")
	public List<TaskSummary> getMyOwnedTask(Status status) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();		
		System.out.println(auth.getName());			
		List<Status> statusList=new ArrayList<Status>();
		statusList.add(status);
		return taskService.getTasksOwnedByStatus(auth.getName(),statusList, "en_US");
	}
	
	
	
	@PostMapping("startTask")
	public void startTask(String userId,Long taskId) {	
		taskService.start(taskId, userId);
	}
	@PostMapping("completeTask")
	public void completeTask(String userId,Long taskId) {
		taskService.complete(taskId, userId, null);
	}
	
	@PostMapping("claimTask")
	public void calimTask(String userId,Long taskId) {
		taskService.claim(taskId, userId);
	}
	
	@PostMapping("assignTask")
	public void assignTask(String userId,Long taskId,String targetUserId) {
		taskService.delegate(taskId, userId, targetUserId);
	}
	
	//用于测试 jpa是否配置生效
	@GetMapping("getUserByUsername/{username}")
	public User getUserName(@PathVariable("username") String username) {

		User user=userRepository.findUserByName(username);
		System.out.println(userRepository.getClass());
		return user;
	}
	
}